#바속어 필터링 모델

import torch
from transformers import BertTokenizer, BertForSequenceClassification, AdamW
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split

# 데이터셋 예시 (임의의 텍스트와 레이블)
texts = ["시발", "씨발", "ㅅㅂ", "행복"]
labels = [1, 1, 1, 0]  # 0: 비속어 없음, 1: 비속어 있음

# 텍스트와 라벨을 분리
X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)

# 토큰화
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

class TextDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len=128):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]

        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=self.max_len,
            truncation=True,  # Added
            padding='max_length',  # Updated
            return_token_type_ids=False,
            return_attention_mask=True,
            return_tensors='pt',
        )

        return {
            'text': text,
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

train_dataset = TextDataset(X_train, y_train, tokenizer)
test_dataset = TextDataset(X_test, y_test, tokenizer)
train_loader = DataLoader(train_dataset, batch_size=2)
test_loader = DataLoader(test_dataset, batch_size=2)

# 모델 불러오기
device = torch.device('cpu')  # CUDA 대신 CPU 사용
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)
model = model.to(device)

# 옵티마이저 및 손실 함수 설정
optimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)
criterion = torch.nn.CrossEntropyLoss()

# 모델 학습
model.train()
for epoch in range(3):  # 에폭 수는 임의로 설정
    for batch in train_loader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()

        print(f'Epoch {epoch}, Loss: {loss.item()}')

# 모델 저장
model.save_pretrained('./model')
tokenizer.save_pretrained('./model')
